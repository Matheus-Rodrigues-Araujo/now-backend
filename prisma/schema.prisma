generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum User_Role {
  ADMIN
  WORKSPACE_ADMIN
  PROJECT_ADMIN
  USER
  VIEWER
}

enum Entity_Type {
  USER
  TASK
  PROJECT
  WORKSPACE
}

enum Profile_Type {
  COMPANY
  INDIVIDUAL
}

enum Task_Status {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Organization_Role {
  ADMIN
  MEMBER
  CONTRACTOR
}

enum Action_Type {
  CREATE
  UPDATE
  DELETE
}

model User {
  id                Int                    @id @default(autoincrement())
  email             String                 @unique
  firstName         String
  lastName          String?
  phone             String?
  hash              String
  image             String?
  profile           Profile?
  projects          Project[]              @relation("UserProjects")
  adminProjects     Project[]              @relation("AdminProjects")
  isActive          Boolean                @default(false)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  history           History[]
  UsersOnProjects   UsersOnProjects[]
  UsersOnWorkspaces UsersOnWorkspaces[]
  organizations     UsersOnOrganizations[]
  Notification      Notification[]

  @@map("users")
}

model Profile {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [userId], references: [id])
  userId    Int          @unique
  address   String?
  country   String
  timezone  String?
  birthdate DateTime?
  type      Profile_Type @default(INDIVIDUAL)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Organization {
  id          Int                    @id @default(autoincrement())
  name        String                 @unique
  description String?
  logo        String?
  workspaces  Workspace[]
  users       UsersOnOrganizations[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@map("organizations")
}

model Workspace {
  id                Int                 @id @default(autoincrement())
  title             String              @unique
  image             String?
  projects          Project[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  UsersOnWorkspaces UsersOnWorkspaces[]
  Organization      Organization?       @relation(fields: [organizationId], references: [id])
  organizationId    Int?

  @@map("workspaces")
}

model Project {
  id              Int               @id @default(autoincrement())
  title           String
  image           String?
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean           @default(true)
  users           User[]            @relation("UserProjects")
  admin           User              @relation("AdminProjects", fields: [adminId], references: [id])
  adminId         Int
  workspace       Workspace?        @relation(fields: [workspaceId], references: [id])
  workspaceId     Int?
  UsersOnProjects UsersOnProjects[]
  boards          Board[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  tags            Tag[]

  @@map("projects")
}

model Board {
  id        Int      @id @default(autoincrement())
  title     String
  tasks     Task[]
  order     Int?     @default(0)
  theme     Json
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("boards")
}

model Task {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  endDate     DateTime?
  status      Task_Status @default(TODO)
  board       Board       @relation(fields: [boardId], references: [id])
  boardId     Int
  order       Int?        @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tags        Tag[]

  @@map("tasks")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  color     String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  Task      Task?    @relation(fields: [taskId], references: [id])
  taskId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("tags")
}

model History {
  id          Int            @id @default(autoincrement())
  description String
  user        User           @relation(fields: [userId], references: [id])
  userId      Int
  entityId    Int
  entityType  Entity_Type
  actionType  Action_Type
  createdAt   DateTime       @default(now())

  @@map("history")
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@map("notifications")
}

model UsersOnOrganizations {
  user           User              @relation(fields: [userId], references: [id])
  userId         Int
  organization   Organization      @relation(fields: [organizationId], references: [id])
  organizationId Int
  role           Organization_Role @default(MEMBER)
  joinedAt       DateTime          @default(now())

  @@id([userId, organizationId])
}

model UsersOnWorkspaces {
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  role        User_Role @default(USER)
  assignedAt  DateTime  @default(now())

  @@id([userId, workspaceId])
}

model UsersOnProjects {
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  project    Project   @relation(fields: [projectId], references: [id])
  projectId  Int
  role       User_Role @default(USER)
  assignedAt DateTime  @default(now())

  @@id([userId, projectId])
}
